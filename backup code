
class ErrorCode(Particle):

    regex = Group((Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN"), "target")

    def interpret(self, match):
        code = match.words.tokens
        return ErrorIdOf(code)


  error code class

    # error = Literal('789')
    # regex = Match('\d{3}')
    # regex = Token('\d')
    # regex = Pos("NNP")+Token("-")+Pos("CD")
    # print regex
    # regex = Question(Pos("JJ")) + (Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN")

    # target = Token("0")+Question(Pos("DT")) + Group(Pos("NN"), "target")
    # regex = Lemma("what") + Lemma("be") + target + Question(Pos("."))

  what is class

    1

    # target = Question(Pos("DT")) + Question(Lemma("meaning") + Pos("IN")) + Group((Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN"), "target")
    # regex = Lemma("what") + Lemma("be") + target + Question(Pos("."))
    #
    # def interpret(self, match):
    #     thing = match.target.tokens
    #     target = IsError() + ErrorIdOf(thing)
    #
    #     return target, "errorNlg"

    2

    # regex = Lemma("what") + Lemma("be") + Question(Pos("DT")) + Question(Lemma("meaning") + Pos("IN")) + \
    #         ErrorCode() + Question(Pos("."))
    #
    # def interpret(self, match):
    #     target = IsError()
    #     return target, "errorNlg"


class WhatIsOraError(QuestionTemplate):
    """
    Regex for questions like

    What is ora-00942?
    What is the meaning of ora-00942?
    """

    # target = Question(Pos("DT")) + Question(Lemma("meaning") + Pos("IN")) +\
    #     Group((Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN"), "target")
    #
    # regex = Lemma("what") + Lemma("be") + target + Question(Pos("."))

    target = Group((Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN") | Pos("VB"), "target")

    regex = Lemma("what") + Lemma("be") + target + Question(Pos("."))

    def interpret(self, match):

        thing = match.target.tokens
        if regex_for_error_code.match(str(thing)):
            target = IsError() + ErrorIdOf(thing)
            meta = "errorNlg", "What"
        else:
            target = IsFile() + FileOf(thing)
            meta = "fileNlg", "What"

        return target, meta


//-----

# coding: utf-8

"""
Basic queries for nova quepy.
"""
from quepy.parsing import Lemma, Pos, QuestionTemplate, Particle, Token, Match, Lemmas, Tokens
from refo import Group, Question, Plus, Literal, Predicate, patterns

from dsl import IsError, ErrorIdOf, HasErrorTip, HasErrorCause, IsFile, FileOf, FileExtensionOf

import re

regex_for_error_code = re.compile(r'\bora\d{5}\b', re.I | re.M)


class WhatIsOraError(QuestionTemplate):
    """
    Regex for questions like

    What is ora-00942?
    What is the meaning of ora-00942?
    """

    target = Question(Pos("DT")) + Question(Lemma("meaning") + Pos("IN")) +\
        Group((Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN"), "target")
    #
    # target_file = Group(Tokens("listener"), "target_file_name") + Group(Token("ora"), "target_file_extension")
    #

    # target = Question(Pos("DT")) + Question(Lemma("meaning") + Pos("IN")) + \
    #     Group(Token("ORA0942"), "target")
    #
    # regex = Lemma("what") + Lemma("be") + target + Question(Pos("."))

    # target = Group(Tokens("listener"), "target_file_name") + Group(Token("ora"), "target_file_extension")

    regex = Lemma("what") + Lemma("be") + target + Question(Pos("."))

    def interpret(self, match):

        thing = match.target.tokens

        target = IsError() + ErrorIdOf(thing)
        meta = "errorNlg", "What"

        return target, meta


class HowToFixError(QuestionTemplate):
    """
    Regex for questions like

    How to fix ora-00942?
    """

    target = Question(Pos("DT")) + Question(Lemma("meaning") + Pos("IN")) +\
             Group((Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN"), "target")
    # regex = Pos("WRB") + Question(Pos("DT")) + Lemma("fix") + target
    regex = Lemmas("how to") + Lemma("fix") + target + Question(Pos("."))

    def interpret(self, match):
        thing = match.target.tokens
        target = IsError() + ErrorIdOf(thing)

        tip = HasErrorTip(target)

        return tip, "errorStepNlg"


class WhyError(QuestionTemplate):
    """
    Regex for questions like

    Why ora-00942?
    What is the reason for ora-00942
    """

    target = Question(Pos("DT")) + Question(Lemma("meaning") + Pos("IN")) +\
             Group((Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN"), "target")
    # regex = Pos("WRB") + Question(Pos("DT")) + Lemma("fix") + target
    regex = (Pos("WRB") | Lemma("what") + Lemma("be") + Question(Pos("DT"))
             + Lemma("reason") + Pos("IN")) + target

    def interpret(self, match):
        thing = match.target.tokens
        target = IsError() + ErrorIdOf(thing)

        return HasErrorCause(target), "whyError"


# class WhatIsFile(QuestionTemplate):
#     """
#     Regex for questions like
#
#     What is ora-00942?
#     What is the meaning of ora-00942?
#     """
#
#     # target_error = Question(Pos("DT")) + Question(Lemma("meaning") + Pos("IN")) +\
#     #     Group((Pos("NN") | Pos("NNP") | Pos("NNS")) | Pos("VBN"), "target_error")
#     #
#     # target_file = Group(Tokens("listener"), "target_file_name") + Group(Token("ora"), "target_file_extension")
#     #
#     # regex = Lemma("what") + Lemma("be") + target_file + Question(Pos("."))
#
#     target = Group(Tokens("listener"), "target_file_name") + Group(Token("ora"), "target_file_extension")
#
#     regex = Lemma("what") + Lemma("be") + target + Question(Pos("."))
#
#     def interpret(self, match):
#
#         thing = match.target_file_name.tokens
#
#         if regex_for_error_code.match(str(thing)):
#             target = IsError() + ErrorIdOf(thing)
#             meta = "errorNlg", "What"
#         else:
#             name = match.target_file_name.tokens
#             extension = match.target_file_extension.tokens
#             target = IsFile() + FileOf(name) + FileExtensionOf(extension)
#             meta = "fileNlg", "What"
#
#         return target, meta